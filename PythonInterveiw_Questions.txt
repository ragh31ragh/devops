
##############Interview Questions##################
Patterns
1.Generate pattern 
#
##
###
####
2.Factorial for a number [ use while loop ] 
input 
result 
count 


3.Fibonacci series 
1,1,2,3,5,8,13---
def fib(n):
    a = 0
    b = 1
    print(a)
    print(b)
    count = 2
    a,b = b, a+b
    while ( count < n ):
        a, b = b, a + b
        print(b)
        count = count + 1

fib(8)

print("###### 4.Count the number of vowels in string###########")

testString='uuuCount the number of vowels in stringaa'
vowels='aeiou'
counter = 0
for char in testString:
    if (char.lower() in vowels):
        counter = counter + 1

print(counter)

###########5. lambda related 
addition = lambda x,y : x + y
print(addition)
###map####
numbers=[1,2,3,4,5]
squared_numbers = map(lambda x : x*3 ,numbers)
print(list(squared_numbers))


###filter####
even_numbers = list(filter(lambda x : x%2 == 0,numbers))
print(even_numbers)

"###### 6.Find the longest word in a sentence using for loop###########
longest_word=''
split 
len 

len_of_longest_word=0
string1='Find the 2afdwerfewfewvaesf longest word in a sentence using for loop aaifwijwf0232'
list_of_string1=string1.split(" ")
print(list_of_string1)
for ele in list_of_string1:
    if (len(ele) > len_of_longest_word):
        len_of_longest_word = len(ele)
        longest_word = ele
print(longest_word)

"###### 6.Reverse each word in sentence ###########
string1='reverse a string'[::-1]
print(string1)


####7.Remove Duplicates in list , and print Second largest number ##########
list1=[2,23,404,591,3,23,12,121,12,12,134,5432,98,3]
list2=list(dict.fromkeys(list1))
list3=sorted(list2)
print(list3)
print(list3[len(list3)-2])


pip install pipreqs
pip freeze >
pip install -r requirements.txt 

#sorting without built in function
my_list = [ 1,23,43,21,34,53,45,23,45,56]
for i in range(0,len(my_list)):
    for j in range(i+1,len(my_list)):
        if my_list[i] >= my_list[j]:
            my_list[i],my_list[j]= my_list[j],my_list[i]

print("my_List")
print(my_list)

Decorator : add extra features into existing functions
Pre-req for decorator:
-------------------------
-In python everything is treated as object
-Function aliasing - give another reference name 
-Nested Functions - a function inside another function 
-Function as return value --> function can return another function 
-Function as an Argument --> function can be passed as an argument to another function 

Decorators:
----------
A decorator is function that takes another function as input,adds extra functionality ,
and returns modified function without changing its original code .

inner function --> wrapper function 

Decorator Chaining : 
--------------------
Decorator chaining means applying mutliple decorators to the same function ,where each decorator enhances or modified the function in some way 

#calling the function with decorator
def (func):
	def inner (name):
		if name == "Sunny Leone":
	else:
		print("Hello Sunny Leone Bad Morning")
	func (name)
return inner


@decor
#decorator function 2 usages
def wish (name):
	print("Hello", name, "Good Morning")
wish ("Sunny Leone")
wish ("Deleep")	

uses:
#authentication of APIs 

one more decoraor example : 
def smart_div(func):
    def wrapper(a,b):
        if a < b:
            a,b, = b,a
            func(a, b)
        else:
            func(a,b)
    return wrapper


@smart_div
def div(a,b):
    print ( a/b )

div(12,36)
#######################################
def smartwish(func):
    def wrapper(name):
        if name == "rd":
            print ("hi Very Very goodmorning rd" )
        else:
            func(name)
    return  wrapper


@smartwish
def wish(name):
    print("hi goodmorning " + name)

wish("ghanika")
wish("hamsika")
wish("rd")

Given a string s, find the length of the longest substring without duplicate characters.
 
 
Example 1:
 
Input: s = "abcabcbb"

Output: 3

Explanation: The answer is "abc", with the length of 3.

Example 2:
 
Input: s = "bbbbb"

Output: 1

Explanation: The answer is "b", with the length of 1.

Example 3:
 
Input: s = "pwwkew"

Output: 3

Explanation: The answer is "wke", with the length of 3.

Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

s="abcabcbb"
substr=''
for char in s :
	if char is not in substr:
		substr.append[char]
print(len(substr)
#################################################
- You are given an array prices, where prices[i] represents the price of a stock on the ith day.
- You need to determine the maximum profit you can achieve by buying on one day and selling on another later day.
- If no profit can be made, return 0.
For example:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

profit = 0 
list1 =  [7,1,5,3,6,4]
for i in (0,len(list1)):
	for j in range(i+1,len(list1)):
		if ( (list[j] - list[i]) > profit):
			profit = list[j] - list[i]
print(profit)
 