P1 : Json parsers with python module 
Read and write json files with python 
API Automation using requests library 
Understand CRUD operations GET , POST , DELETE, PUT API methods for automation 
Parsing API responses with Python utilities 

##24.Parsing json strings in python###
import json
courses = '{"name" : "RahulShetty" , "Languages" : ["Java","Python"]}'
dict_courses = json.loads(courses)
print(dict_courses["name"])

json.loads --converts json to dictionary object 

##25.parsing json file in python####
C:\RD\Trainings\2025_API_Testing\course.json

import json
#loads method for string
#load for json file object 
courses = '{"name" : "RahulShetty" , "Languages" : ["Java","Python"]}'
dict_courses = json.loads(courses)
print(dict_courses["name"])
print(dict_courses["Languages"][0])

with open ('C:\\RD\\Trainings\\2025_API_Testing\\course.json') as f :
    data = json.load(f)
    print(data)
    print(data['dashboard']['website'])
    print(data['courses'][1]['title'])
	
##26.Finding price of RPA course ####
	
	##finding price of course RPA
    for course in data['courses']:
        print(course)
        if course['title'] == "RPA" :
            print(f"Price of course RPA {course['price']}")
			
##27.Compare 2 json schema using python dictionary  ####
2 file objects
get content into dictionary and then compare it 



###########Section 4: API Automation Testing with Python Requests Library###
documentaion is available in goolge drive 
#Url should be: http://216.10.245.166/Library/Addbook.php


https://reqres.in/
https://reqres.in/
https://reqres.in/api/users?page=2
response.status_code
response.json
response.text
response.content 

for get http method : 
import requests
#response=requests.get("https://reqres.in/api/users?page=2")
response = requests.get("http://216.10.245.166/Library/GetBook.php",
             params={"AuthorName":"Rahul Shetty2"},)
json_response = response.json()
print(type(json_response))
print(json_response)
assert  response.status_code == 200
print(response.headers)
assert response.headers['Content-Type'] == 'application/json;charset=UTF-8' , "ExpectedValueDidNotMatch"
#Retrieve the book details with bnid3473
#print(json_response[6]['book_name'])
for items in json_response:
    #print(items)
    #print(items['book_name'])
    if items['isbn'] == '0108':
        print(items['book_name'])
        break


for post http method .

import requests
payload={
    "name":"Raghavendra",
    "job" : "Automation"
}
response = requests.post("https://reqres.in/api/users",data=payload)
print(response.json())

requests.post("URL",data=payload)
payload is dictionary object 


URLs will change based on environment we are testing 
utilities - properties.ini 
hosts - API, SQL and SSH 

Utilities will have config, properties and resources 
properties.ini file contains 
[API]
endpoint = https://reqres.in

[HOST]
[DB]

config python file contains details of config parser 
import configparser
def getConfig():
    config = configparser.ConfigParser()
    config.read('utilities/properties.ini')
    return config
	
import requests
from utilities.configurations import getConfig
payload={
    "name":"Raghavendra",
    "job" : "Automation"
}
response = requests.post(getConfig()['API']['endpoint']+'/api/users',data=payload)

Resources also we can add in config files 

Above is like optimizing the code

##########now we will look at authentication########
requests.get("url",data={dict object} , auth ( user= abc , password = rd)
use the exposed github apis 
##uploading files using api 
https://httpbin.org/post


#####Section 6: API Testing Request Library Miscellaneous Concepts

---How to create session manager for API requests call 
BaseURL / Resource 
401 - unauthorized 
Consider if we are hitting multiple APIs we need to authenticate everytime . so only creating sessions 
import requests
se = requests.session()
se.auth = ("username",getPassword())
response = se.get(url, params= )

--Send and manage cookies through API Requests 
cookies to be sent in dictionary format 
cookie = {'visit-month':'Febraury'}
request.get("url", cookies = cookie)
website will be loaded for stored cookies from browser for feb month 
if we get back cookies in response , that means we have successfully submitted cookies during request 
we can give session manager capabilities for adding cookies 
se.cookies.update('visit-month':'Febraury')

###39. Time out and Redirection attributes in making request calls
redirection - 302
response.history 
allow redirect= False 
response can be delayed in realtime  in ecom websites 
timeout attribute 
timeout = 1 second 

cookie = {'visit-month': 'February'}
response = requests.get('http://rahulshettyacademy.com', allow_redirects=False, cookies=cookie, timeout=1)
# 301,200
# print(response.history)
print(response.status_code)



40. Sending Attachments through Post request call using Files Dictionary object
https://petstore.swagger.io/
to upload image use this sample url 

Python RestAPI Interview Questions

# Attachments
url = "https://petstore.swagger.io/v2/pet/9843217/uploadImage"
files = {'file': open('C:\\Users\\Owner\\Documents\\ra.png', 'rb')}
r = requests.post(url, files=files)
print(r.status_code)
print(r.text)



###############Build SQL Utility to interact with Database Tables from Python Code
#####29-Apr-2025####
42. Setting up MYSQL Instance to drive the data from Python Code
mysql installer 
Set up mysql server and open workbench 
Create 2 tables and add some data 
package 
mysql-connector-python 

43.43. Setup Database with the Example Table Data and start Connection

import mysql.connector
#host,databases,username,password
#connection string  ,connection object
conn = mysql.connector.connect(host='localhost',database='PythonAutomation',
                        user='raga',password = ' root ')
result = conn.is_connected()#it will return true or false
print(result)


44.Start SQL Queries download

45. Executing Queries on to Database from Python Code
SQL database results are returned in form of tuples 

cursor = conn.cursor()
cursor.execute('select * from customerInfo')
row = cursor.fetchone(),fetchall()
print(row )
#the printed row will be tuple
#('selenium',datetime.date(2020,6,7),120,'Africa')
print(row[3])
#Africa
fetchall - will return result in format of list of tuples 
fetch one - cursor will move one by one line 

rowsall= cursor.fetchall()#list of tuples 


46. Iterate over database table results set from Python and parse the results
allrows = cursor.fetchall()
iterate over list of tuples now 
sum = 0 
for row in rows: 
	sum = sum + row[2]#get amount row by row

now will will check update query :

query= " update * write update %scourse %place query here"
data("UK","query")

use cursor.query('query',data) 
conn.commit()
conn.close()

Next example is on delete method 
	
47. Create Connection utility and pass the SQL connection externally into test
properties.ini file 
[SQL]
host=localhost
db=pythondb
username=raghu
password=raghu 
in conifgurations.py file 
create method 
def getConnection : 

connect_config= {
user = getconfig['SQL']['user]
host
password
db 
}
giving ** represents dictionary ( **connect_config) 
import mysql error package to understand sql error 

#########Section 8: Integrate Database utilities to API Test for End to end Automation
48. Integrate Database results into API Test Data to build functional flow
def BuildPayloadFromDB():
	tuple = getQuery(query)#will right one method 
	addBody = {}
	addBody['name'] = ragha
	#addBody['name'] = tp[0]
	return addBody()
	
def getQuery(query) #method 


#########Section 9: BDD Framework Development for API Automation from Scratch

#########Section 10: Read and Write to CSV files with Parsing using Python methods
61. Parsing and reading the CSV files using Python csv package
Yes, you can read/write excel file using openpyxl package. Here is a link if you want to read about it: https://openpyxl.readthedocs.io/en/stable/

import csv
with open('C:\\--\\loanapp.csv') as csvFile:
    csvReader = csv.reader(csvFile,delimiter=',')
    print(list(csvReader))
	
[['Name', 'Status'], ['Tim', 'approved'], ['sam', 'rejected'], ['Ram', 'approved'], ['Joe', 'rejected']]


import csv
with open('C:\\Users\\bgh51043\\PycharmProjects\\PytestPython\\BackendAutomation\\utilities\\loanapp.csv') as csvFile:
    csvReader = csv.reader(csvFile,delimiter=',')
    #print(list(csvReader))
    names = []
    status = []
    for row in csvReader:
        #print(row)
        #print(row[0])
        names.append(row[0])
        status.append(row[1])
    print(names)
    print(status)
	
62. Building a logic to get the data from CSV based on conditional query
names.index['sam'] will return index of sam.

63.Parsing and writing back to CSV files using Python csv package
with open('C:\\Users\\bgh51043\\PycharmProjects\\PytestPython\\BackendAutomation\\utilities\\loanapp.csv','a') as wFile:
    write = csv.writer(wFile)
    write.writerow(["bob","rejected"])