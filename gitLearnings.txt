git config --global user.name "StudentApnaCollage"s
git config --global user.email " officialEmaid@id.com"
git config --list 

##---while pulling code from repo 
git clone 
git status - 

remote - local 

untracked , modified , staged , unmodified 

git add and commit 
commit - is the record of change 

push - upload local repo content to remote repo 

git push origin main

-ask for permission if pushing for first time 


##--while uploading code from local repo
git init 

git remote add origin "URL"
git remote -v 
git push -u origin main 

##Always prefer creating project in github and then clone
dont go with local folder first 

Git branch 

git branch ( to check branch)
git branch - M main ( ro rename branch)
git checkout <branchname> (to navigate)
git checkout -b < new branchname >

git branch -d < -branch name > 

git merge - branch name 
git merge main
Pull Request 

Resolving merge conflicts .

An event that take place when Git is unable to automatically resolve differences in code between two commits .

Undoing changes 


git reset filename .

git reset <hash>

git fork means - rough copy 

############13-Feb-2025######
hidden files - ls -a 

modifiy files - git add .
git commit 

local repo :
I:\Learnings\Raghavendra\gitdemo\rdtestrepo
remote repo :
https://github.com/ragh31ragh/rdtestrepo

untracked - new files that git doesnt track yet 
modified - changed
staged - file is ready to be commited
unmodified - unchanged 
add - add new or changed files in your working directory to the git staging area
commit- it is record of the change 
git commit -m "message"

push - upload local repo content to remote repo 

git push origin main

origin is just name , we can also name  anything else 

############
if we are creating repo from scratch use init command in local repo 
init - used to create new git repo 

git remote add origin https://github.com/ragh31ragh/devops.git
git branch -M main
git push -u origin main


git remote add origin <link>
git remote add origin https://github.com/ragh31ragh/localrepo.git

git remote -v ( to verify remote)
origin  https://github.com/ragh31ragh/localrepo.git (fetch)
origin  https://github.com/ragh31ragh/localrepo.git (push)



git branch (to check branch)
git branch -M main ( to rename branch)
git branch -M feature2

git push origin main 
git push -u orgin main 

-u to set upstream 


local repo 
I:\Learnings\Raghavendra\gitdemo\localRepoRD
you can open using vs code also 

if we see .git folder - then it is a git repo 

add some files 


Create new repo where you want to put local code 


############Workflow ##############
Local git 
github repo - clone -changes - add - commit - push 

############Git branches  ##############
Branch commands 
git branch (to checkout branch )
git branch -M main ( to rename branch)

git checkout branchname (to navigate)
git checkout -b <new branchname> (to create new branch)
git checkout -b feature2

git branch -d <-branchname > (to delete branch) 

we cannot delete the same branch which we are working 

git push origin feature1

############Merging code   ##############
Way 1 
git diff <branchname> (to compare commits,branches, files and more)
consider if we in feature1 branch , then execute command
gitt diff main 
so we can compare code with main branch

git merge <branchname> (to merge 2 branches )

Way 2
Create a PR 
Pull request 
-It lets you tell others about changes you have pushed to a branch in a repo in github 

After merging we need to execute pull command 
to retrieve the new features


pull command 

git pull origin main 

--what if there is merge conflict 

############Resolving Merge confilicts ##############
in same index file 
<p>This is new repo</p>
<p>This is a new feature (dropdown)</p>

add button in main branch
and add dropdown in feature branch 

now we will do 
git diff main
git merge 

Incoming change - main branch 
current change - feature1 branch 

we can merge feature1 changes to main using command
switch to main 
then 
git merge feature1

############undoing changes -apna collage #############

Case 1 : Staged Changes 
git reset <filename>
git reset 

Case 2 : commited changes (for one commit )
git reset HEAD~1

Case 3 : commited changes (for many commits)
git reset <commit hash>
git reset --hard <commit hash> 

last commit screnshot is head1

git log 
to check all commits history 
######

git hard - local changes also wiped
soft - only repo changes 

############Fork  #############
A fork is new repo that shares code and visibility settings with the original "upstream" repo.
Fork is a rough copy 

to contribute for open source 
https://github.com/expressjs/express

copying code of some other account to our account 
update 
and create new pull request 


References :
Apna collage 
Sharaddha
https://www.youtube.com/watch?v=Ez8F0nW6S-w


############Ignoring files  #############
create .gitignore files 
and all all the files which you want to ignore 
*.log 	
added something

###########git stash ###########
git provides an easy way of stashing these uncommited changes so that we can return to them  later 
, without having to make unneccasary commits 
git stash 
git stash save 
(both staged and unstaged )
WIP 
stashed 

Use git stash pop to remove the most recently stashed changes in your stash and reapply them to  your working copy 

stash apply 
you can use git stash apply to apply whatever is stashed away , without removing it from the stash 
This can be useful if you want to apply stashed changes to multiple branches .


git stash - u 
if you have untracked files then will not be included in git stash 
Fortunately , you can use -u option to tell git stash to include those untracked files 

git stash list #my halfwaydone feature ,not quite ready to commit yet
git stash apply@{2}

git stash clear 

#####
############21-Feb###########
git config --list
git clean -f - to remove files
git reset - backword
gets all changes moved from staging to working directory
git commit -forward

git reset - mixed
mixed and soft data is not lost
gets all changes moved from staging to working directory


git reset --soft HEAD~1
git reset --soft HEAD de3385a56bb5b02e18abcec0c66fd1c2fff315af
all changes fall back to staging and commit is removed

git reset --hard HEAD~1
all changes are permanently gone

git reflog : to check all that has happened

3:07

read permission only , writ permission only

############21-Feb###########
git config --list
git clean -f - to remove files
git reset - backword
gets all changes moved from staging to working directory
git commit -forward

git reset - mixed
mixed and soft data is not lost
gets all changes moved from staging to working directory


git reset --soft HEAD~1
git reset --soft HEAD de3385a56bb5b02e18abcec0c66fd1c2fff315af
all changes fall back to staging and commit is removed

git reset --hard HEAD~1
all changes are permanently gone

git reflog : to check all that has happened

3:07

read permission only , writ permission only

############24-Feb###########
We can enable merge button only after 3 approval
creating pull request using UI


#####Merging the branches and solving resolve conflicts in multiple ways

When all the changes in the code occur in different lines or in different files 
Git will successfully merge commits without your help 

But you will run into merge conflicts when same lines of the code which you changed 
are already changed by others after you cut the branch
Git Auto merge 
Git Manaul merge 
git push origin master -f
force push 
 
We can create pull request from UI
Add assignee,
reject PRs
accept it

17
0:20 screenshot available
when all the changes in our code occurs on diff lines or in different files
Git will successfully merge commits without your help
Git auto merge or manual merge

But you will run into merge conficts when same lines of code which you changed are already changed
by others after you cut that branch
manaul merge is the solution


git push origin master -f
when you forcefully go behind few commits .

manual merge - we can merge feature branch to master and master to feature - vice versa

###Merge conflict and how to resolve them
Merge commit
Squash
Fast Forward



############24-Feb###########
creating merge conflict
in branch edit the same file
in master /main edit the same file
create PR- , you will not be able to create merge request


############24-Feb###########
Git rebase
and squash
Instead of direct merge , how to rebase and merge the branch
-Git Merge and Git Rebase serve the same purpose
-They are desinged to integrate changes from multiple branches into one .
Although the final goal is same , those two methods achieve it in different ways
-Rebasing is the process of moving or combining a sequence of commits to a new base commit
-the primary reason for rebasing is to maintain a linear project history


git checkout master
git pull
git checkout branch
git rebase master
insted of
git merge master

we can do rebase or normal merge
varies from company to company

Scenario 4 :
How to squash the commit with rebase
"squash" in git means to combine multiple commits into one

git rebase -i HEAD~2
squashing 2 or more commits into 1

when we change commit history
we need to forcefully push using -f command

24.End to end example on applying git rebase and squash together on working branch

you can better learn merge only -
rebase and squash you can learn once you master merge command

S9 : Advanced Git workflows

Scenario 6 : How to edit last commit
git commit --amend
git commit --amend -m "new commit message"

Scanario 7 : How to move the commit from one branch to another ?
git cherrypick commit id
git cherrypick continue



#####git bisect
Scenaro 8 :
If application fails after pusing many commits , how to identify which commit caused the issue ?
git bisect start
git bisect bad commitid
git bisect good commitid
git bisect bad
git bisect good

git bisect reset

Travelling to some old commit :
git checkout commitid
git checkout -b bugfixbranch
git cherry-pick commitid

####stash changes - revert code in git public repo
make changes in 2 files - 2 branches
account
profile
git stash
git stash pop
when you are asked to work on diff branch , we can stash the changes
work on another branch . complete it
and comeback and continue working on this
git diff
to know the changes in content of file

git blame filename

diff between git status and git diff

######revert commits in public repo
revert - history will remain
reset - history will not be there
revert - use in public repo
reset - use in private local repo

diff between revert and hard reset :*****


###bit bucket build pipeline and auto trigger

Difference between gitpull and git fetch
git fetch downloads all the latest commits from all branches and all the new branches from the remote and saves it in local repo , but it wont merge it to the local branch you are working on

It means git fetch will never change your working state

Latest content can be viewed by below command
git checkout origin/branchname

Git pull  on the other hand downloads all the latest commits from all branches and all new branches from the remote and merge(copy) those changes to the local branch you are working on

git pull is combination of git fetch and merge

####Git tagging #####
Tagging lets developer mark important checkpoing in the course of their projects development
Create git tag - git tag <tagname>
Verify git tag - git tag
Create tag with message - git tag -a <tagname> -m "message"
Push tag - git push --tags

tagging another commit id

git tag v2_release commitid

#######
git checkout master 
git pull 
git checkout branch
git merge master 


####Scenario3 ##############
21. What is the rebase in the GIT and importance of rebasing the branch
Instead of direct merge,how to rebase and merge the branch 
--------------------------------------------------------------
-Git merge and git rebase merge serves the same purpose 
-they are desined to integrate changes from multiple branches 	into one.
Althought the final goal is the same , those 2 methods achieve it in different ways 
-Rebasing is the process of moving or combining a sequence of commits to a new base commit
-the primary reason for rebasing is to maintain a linear project history 

-commit history is linear 

22. Real time example on how to rebase the master changes to working branch
git checkout -b rebasedemo 
make changes in 2 files 
changed 2 files in rebasedemo
changed 1 diff file in master

git checkout master 
git pull 
git checkout branch
git merge master ----> git rebase master 
using above commands commits will be linear 


####Scenario4 ##############
23. How to squash the commits into single commit with Git rebase
How to squash commits with rebase
--------------------------------------------------------------
git rebase -i HEAD~3


24.
24. End to end example on applying Git rebase and Squash together on working branch