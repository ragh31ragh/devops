##############31-Mar-2025##########
 /c/RD/Trainings/gitrepos/devops/devops (main)
Why Playwright 
pip - package installer 
C:\Users\bgh51043>where python
C:\Users\bgh51043\AppData\Local\Programs\Python\Python37-32\python.exe
C:\Users\bgh51043\AppData\Local\Microsoft\WindowsApps\python.exe

git:
C:\Users\bgh51043\PycharmProjects\PytestPython
S C:\Users\bgh51043\PycharmProjects\PytestPython>
cd /c/Users/bgh51043/PycharmProjects/PytestPython/playwright
/c/RD/Trainings/gitrepos/devops/devops

git : 
/i/Learnings/Raghavendra/2025_DevOps
/i/Learnings/Raghavendra/PythonProjects/playwright

https://rahulshettyacademy.com
https://rahulshettyacademy.com/loginpagePractise
https://rahulshettyacademy.com/seleniumPractise/#/offers
https://rahulshettyacademy.com/AutomationPractice/
https://rahulshettyacademy.com/client
https://rahulshettyacademy.com/client/
rahulshetty@gmail.com
Iamking@000



jar  - java world packages 
pip install -U pytest 

pip install pytest-playwright

Install browsers : 
playwright install 

Fixtures : 
About Pytest fixtures
defining 

-Prefixing function name with test_
-@pytest.fixture
-@pytest.fixture(scope="module")
-Defining scope of pytest fixture as module or function 
-Sending pytest fixture function name as argument 

conftest.py

session scope 

How to run all tests together ?
pytest -s ( to display output)
pytest 

yield keyword 

returning values from functions 
@pytest.mark.skip

python -m platwright install 

@pytest.mark.smoke
pytest -m smoke 
to run tests with smoke tag 

Below covers section 5 : 
Launching browser.
finding elements and writing code for it 

#########Chromium engine browser with playwright fixture 
-created a simple function to launce browser : 
def test_playwrightBasics(playwright):
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://rahulshettyacademy.com")
	
def test_playwrightShortCut(page:Page):
    page.goto("https://rahulshettyacademy.com")
	
running test using commandline : 
 pytest test_playwrightBasics.py::test_playwrightShortCut --headed
 
 
passing --headed arguments for test 


def test_coreLocators(page:Page):
    page.goto("https://rahulshettyacademy.com/loginpagePractise")
    page.get_by_label("Username:").fill("rahulshettyacademy")
    page.get_by_label("Password:").fill("learning")
    page.get_by_role("combobox").select_option("teach")
    time.sleep(5)
	
get_by_role for dropbox , combobox etc 

label will not work in all cases 
-it should have input
-or id associated .

css #id
css .classname 

def test_coreLocators(page:Page):
    page.goto("https://rahulshettyacademy.com/loginpagePractise")
    page.get_by_label("Username:").fill("rahulshettyacademy")
    page.get_by_label("Password:").fill("learning")
    page.get_by_role("combobox").select_option("teach")
    page.locator("#terms").check()
    page.get_by_role("link",name="terms and conditions")
    page.get_by_role("button",name="Sign In").click()
    time.sleep(5)
	
	
s6: Playwright ui methods with real time examples 
TC : enter wrong creds and capture error message 

Autowait example 
 1 lecture explained about autowait .
 and this code 
 from playwright.sync_api import Page, expect
 
 expect(page.get_by_text("Incorrect username/password.")).to_be_visible()
 
 
 ###Running test in firefox browser 
 def test_firefoxBrowser(playwright):
    firefoxBrowser = playwright.firefox
    browser = firefoxBrowser.launch(headless=False)
    page = browser.new_page()
    page.goto("https://rahulshettyacademy.com/loginpagePractise")
	

################April 2 , 2025##########	
##Filter working on dynamic selection of card items in the list 
select given 2 products and add to the cart 
css selector - id , tag and classname 
selector hub -plugin
here we selected iphone x and nokia edge and added to cart
clicked on checkout
verified whether 2 items are present in checkout 

def test_UIValidationsDynamicScript(page:Page):
    page.goto("https://rahulshettyacademy.com/loginpagePractise")
    page.get_by_label("Username:").fill("rahulshettyacademy")
    page.get_by_label("Password:").fill("learning")
    page.get_by_role("combobox").select_option("teach")
    page.locator("#terms").check()
    page.get_by_role("button", name="Sign In").click()
    #expect(page.get_by_text("Incorrect username/password.")).to_be_visible()
    #adding items and verifying if its showing in cart
    iphoneProduct = page.locator("app-card").filter(has_text="iphone X")
    iphoneProduct.get_by_role("button").click()
    nokiaEdge = page.locator("app-card").filter(has_text="Nokia Edge")
    nokiaEdge.get_by_role("button").click()
    page.get_by_text("Checkout").click()
    expect(page.locator(".media-body")).to_have_count(2)
    time.sleep(5)

https://rahulshettyacademy.com/loginpagePractise/
page.get_by_label("Username:").fill("rahulshettyacademy")
page.get_by_label("Password:").fill("learning")
	
###child windows and tabs 

def test_childWindowHandles(page:Page):
    page.goto("https://rahulshettyacademy.com/loginpagePractise")
    with page.expect_popup() as newPageInfo:
        page.locator(".blinkingText").click()
        childPage = newPageInfo.value
        text = childPage.locator(".red").text_content()
        print(text)
		
		
###python string methods for assertion 

        text = childPage.locator(".red").text_content()
        print(text)
        #Please email us at mentor@rahulshettyacademy.com with below template to receive response
        words = text.split("at")
        email = words[1].strip().split(" ")[0]
        print("Email")
        print(email)
        assert email == "mentor@rahulshettyacademy.com"

######S7 : UI functional validations with assersions using playwright python 
https://rahulshettyacademy.com/AutomationPractice/
getting attribute by placeholder 
Clicking on Hide and checking if hiding or not .
using assertion to verify it 


def test_UIChecks(page:Page):
    page.goto("https://rahulshettyacademy.com/AutomationPractice/")
    expect(page.get_by_placeholder("Hide/Show Example")).to_be_visible()
    page.get_by_role("button",name="Hide").click()
    expect(page.get_by_placeholder("Hide/Show Example")).to_be_hidden()
    time.sleep(5)
	
Handling Alerts and Pop ups 
lambda functions - functions without name - anonymous functions 
This section is regarding handling alerts using listener 
    page.on("dialog", lambda dialog: dialog.accept())
    page.get_by_role("button",name="Confirm")
	
Handling Frames : 
   ##Frame Handling
    pageFrame = page.frame_locator("#courses-iframe")
    pageFrame.get_by_role("link",name="All Access plan").click()
    expect(pageFrame.locator("body")).to_contain_text("Happy Subscibers")
reference will go from page to pageFrame 

Handling Web Tables automation : 
https://rahulshettyacademy.com/seleniumPractise/#/offers
check price of rice is 37 
#identify price column
#identify rice column 
#extract the price 
    page.goto("https://rahulshettyacademy.com/seleniumPractise/#/offers")
    page.locator("th")
    for index in range(page.locator("th").count()):
        if page.locator("th").nth(index).filter(has_text="Price").count() > 0 :
            colValue = index
            print(f"Price column value{colValue}")
            break
    riceRow = page.locator("tr").filter(has_text="Rice")
    expect(riceRow.locator("td").nth(colValue)).to_contain_text("37")
	
	
About mouse hover : 
    #Mouse Hover
    page.locator("#mousehover").hover()
    page.get_by_role("link",name="Top").click()

About hovering 

rahulshetty@gmail.com
Iamking@000

###Recording and Playback 
write the below command in pycharm terminal to start recording 
playwright codegen https://rahulshettyacademy.com/client


###3-Apr-2025############
API Testing 
https://rahulshettyacademy.com/client/
we will use above website 
rahulshetty@gmail.com
Iamking@000

In this section from 44 to 49 
Creating order by API 
Login 
checking orders page
cliking on the order and verifying the thankyou text code is written.

44:Analyzed how to create apis by looking into console
how to create orders order id etc 

45 . Creating Login function in UI writing code for same
creating utils and API utils class 

46 . we will see how to make api call with playwright 
create script to give deatils 
like url 
header info etc  
created createOrder API - methods

47 . we will create login api 
in python json is dictionary  
in this lecture we created get token method 
analyze the code .

from playwright.sync_api import Playwright

ordersPayload = {orders: [{country: "India", productOrderedId: "67a8df1ac0d3e6622a297ccb"}]}
class APIUtils:

    def getToken(self,playwright:Playwright):
        api_request_context = playwright.request.new_context(base_url="https://rahulshettyacademy.com")
        response = api_request_context.post("/api/ecom/auth/login",
                                 data = {  "userEmail": "rahulshetty@gmail.com",  "userPassword": "Iamking@000"}
                                 )
        assert = response.ok
        print(response.json())
        responseBody = response.json()
        return responseBody["token "]

    def createOrder(self,playwright:Playwright):
        token = self.getToken(playwright)
        api_request_context = playwright.request.new_context(base_url="https://rahulshettyacademy.com")
        response = api_request_context.post("/api/ecom/order/create-order",
                                 data = ordersPayload,
                                 headers={"Authorization" : token
                                          "Content-Type" : "application/json"})
        print(response.json())
		
48. Refactor API Utils methods and call them from Tests in generating data
Running and checkink test
getting order id in main function 


49. Dynamically find the order Id from the order History table with easy logic
selector hub
Identifying order details clicking on view button 
and applying assert statement 

import time

from playwright.sync_api import Playwright, expect

from utils.api_base import APIUtils


def test_e2e_web_api(playwright:Playwright):
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://rahulshettyacademy.com/client")
    #create order and grab order id

    api_utils = APIUtils()
    orderId = api_utils.createOrder(playwright)

    #login
    page.get_by_placeholder("email@example.com").fill("rahulshetty@gmail.com")
    page.get_by_placeholder("enter your passsword").fill("Iamking@000")
    page.get_by_role("button",name="Login").click()
    time.sleep(5)
    page.get_by_role("button",name="ORDERS").click()
    row_item = page.locator("tr").filter(has_text=orderId)
    row_item.get_by_role("button",name="View").click()
    expect(page.locator(".tagline")).to_contain_text("Thank you for Shopping With Us")
    time.sleep(5)


    #orders page . order is present .
    #order history page - order is present
	
#####Section 9: Intercepting Network requests & responses to test Edge cases with Playwright
50.Concept of intercepting network 
Intercept api response for sake of testing 
No orders page validation 
we can mock request and response using route methods
fulfil -for response
and continue for request 

51. Intercepting response calls with route->fulfil methods to test edge cases
rahulshetty@gmail.com
Iamking@000

import time

from playwright.sync_api import Playwright, Page

fakePayloadOrderResponse = {"data": [], "message": "No Orders"}


def intercept_response(route):
    route.fulfill(
        json=fakePayloadOrderResponse
    )
    print ( " In intercept_response function ")


def test_Network(page: Page):
    page.goto("https://rahulshettyacademy.com/client")
    page.route("https://rahulshettyacademy.com/api/ecom/user/get-cart-count/*", intercept_response)
    # login
    page.get_by_placeholder("email@example.com").fill("rahulshetty@gmail.com")
    page.get_by_placeholder("enter your passsword").fill("Iamking@000")
    page.get_by_role("button", name="Login").click()
    time.sleep(5)
    page.get_by_role("button", name="ORDERS").click()
    order_text = page.locator(".mt-4").text_content()
    print("##########order_text")
    print(order_text)


Loading is displayed instead of other text 



52. Intercepting request calls with route->continue methods to test edge cases
Here we are creating new request and checking edge case scenario
giving diff order id and checking for message you are not authorized 

import time

from playwright.sync_api import Playwright, Page
def interceptRequest(route):
    route.continue_(url="https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=6711e249ae2afd4c0b9f6fb0")
    print ( " In intercept_response function ")

def test_Network2(page: Page):
    page.goto("https://rahulshettyacademy.com/client")
    page.route("https://rahulshettyacademy.com/api/ecom/order/get-orders-details?id=*", interceptRequest)
    page.get_by_placeholder("email@example.com").fill("rahulshetty@gmail.com")
    page.get_by_placeholder("enter your passsword").fill("Iamking@000")
    page.get_by_role("button", name="Login").click()
    time.sleep(5)
    page.get_by_role("button", name="ORDERS").click()
    page.get_by_role("button", name="View").first.click()
    time.sleep(5)
    message = page.locator(".blink_me").text_content()
    print(message)
	
53. save and inject the session cookies into browser at run time with playwright
discussing about bypassing login 
using browser local storage token 
java script injection in tripe quotes 

page.add_init_script(f"""localStorage.setItem('token','{getToken}')""")


def test_sessionStorage(playwright: Playwright):
    api_utils = APIUtils()
    getToken = api_utils.getToken(playwright)
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    # script to inject token in session local storage
    page.add_init_script(f"""localStorage.setItem('token','{getToken}')""")
    page.goto("https://rahulshettyacademy.com/client")
    page.get_by_role("button", name="ORDERS").click()
    time.sleep(4)
    expect(page.get_by_text('Your Orders')).to_be_visible()
	
	
	
#############	Section 10: Playwright Pytest Framework- Part 1 (Pageobject, Data Driven,Parameterization)
	########4-Apr -2025 #####
	
54. overview of  the Best practices for Playwright framework design
Word document on framework :
1.Avoid hard coding test data 
2.Externalize test data
3.Implement Page Object Model
4.Cenralize reusable code 
5.Define global environment variables
6.Apply grouping /tags to run targeted tests
7.Generate HTML Reports
8.Capture Logs and Screenshots
9.CI-CD Integration wit Jenkins
10. Integrate cucumber BDD

55. Drive the test data externally from Json files into Playwright fixtures
convert json file to python object 
one of the earliar standalone will create framework for it 
creating crendentials file in data directory 

json explanation 
reading dictionary using python 
load is a method which convert json file to python object 
{
  "user_credentials": [{
    "userEmail" : "rahulshetty@gmail.com",
    "password" : "Iamking@000"
  },
{
    "userEmail" : "anshika@gmail.com",
    "password" : "Iamking@000"
  }
]
}

    with open ('data/credentials.json') as f:
        test_data = json.load(f)
    page.goto("https://rahulshettyacademy.com/client")
	https://en.wikipedia.org/wiki/Wikipedia
("https://rahulshettyacademy.com/client")
    "userEmail" : "rahulshetty@gmail.com",
    "password" : "Iamking@000"
	
56. Parameterize the Test with multiple data sets with python dictionaries
we will make sure that the test wil run the nubmer of times we have user credentials data 
dict , list 
pytest takes fixtures as arguments 

playwright is one of inbuild fixture 
introducted conftest.py global file 
Added conf file 
modified framework file to take input as username and password 
page.get_by_placeholder("email@example.com").fill(user_creds["userEmail"])
    page.get_by_placeholder("enter your passsword").fill(user_creds["password"])
	
Ran the test with 2 user credentials 

57. Understand the page object design pattern and how to apply for the tests
modifications in utils file also API utils 
to get dynamic user credentials 
now test should pass with both credentials 

For URLs and locators we will use POM 
created new dir page object 
and new py files
to create 2 new classes
Login and Dashboard 

expaling how to use construction 
sending page object from framework code 
as default constructor 


58. Implement Page object design  to end to end test - example
login method updates
 def login(self,userEmail,userPassword):
        self.page.get_by_placeholder("email@example.com").fill(userEmail)
        self.page.get_by_placeholder("enter your passsword").fill(userPassword)
        self.page.get_by_role("button", name="Login").click()
		
class DashboardPage:
    def __init__(self,page):
        self.page = page

    def seletOrderNavigationLink(self):
        self.page.get_by_role("button", name="ORDERS").click()
		
		
59. Optimize Test by avoiding object creation in tests and move into PO classes
as we are landing on dashboard page after clicking login 
we can create object in login method only 
creating PO for for order history 
and returning objects 

creating order detail page
creating python file for all pages.
now we have created page object .

######Section 11: Playwright Pytest Framework- Part 2 (Global config, Parallelization, Tagging)

60. How to configure and drive global run time variables into Playwright framework
creating a fixture in conftest.py file 
def pytest_addoption(parser):
    parser.addoption(
        "--browser_name",
        action="store",
        default="chrome",
        help="Browser selection",
        type=type_checker,
    )


@pytest.fixture(scope="session")
def browserInstance(playwright,request):
    browser_name = request.config.getoption("browser_name")
    browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    context.close() 
    browser.close()

61. Understand how browser value is decided at run time with global value and ifelse
#gettinb page by calling browser Instance fixture 
@pytest.fixture(scope="session")
def browserInstance(playwright,request):
    browser_name = request.config.getoption("browser_name")
    if browser_name == "chrome":
        browser = playwright.chromium.launch(headless=False)
    elif browser_name == "firefox":
        browser = playwright.chromium.launch(headless=False)
    context = browser.new_context()
    page = context.new_page()
    context.close()
    browser.close()
	
pytest .\test_framework_web_api.py --browser-name firefox
Running test from command line by providing browser parameter 
session scope only once 
run and test code in firefox and chrome 

URL changes for diff environments .
url name also we can parameteize 

62. Running selected tests in the framework with pytest tag annotations
over the time we have updated some files -, so some tests might fail 
created API Base framework file to revert the changes done during framework lectures 

Run all tests using pytest command 
IDE level --headed arguments wont reflect if we run all tests using command pytest 
how to run only one test now
tag it as smoketest 

@pytest.mark.smoke 
pytest -m smoke 

Runnint tests with keyworkd having web_api 

pytest -k web_api

63. Running tests in playwright framework in parallel and sequence modes