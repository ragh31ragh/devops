##############
JS is java programming language . we use to give instructions to computer 
can write scripts on browser 
In browser console we can write javascript code 
Ctrl + L to clear console 
alert("RD");

VS code - free - by microsoft 
--VS code installation 

###Variable datatype##
console.log issue is used to print the message .
console.log("My name")

HTML file required to connect to browser from JavaScript file 
HyperTextMarkupLanguage
Shift+! -> autogenerate code

0:00:00 Introduction
0:00:52 Prerequisites
0:01:28 How to Take This Course
0:02:57 What is TypeScript?
0:07:38 Setting Up the Development Environment 
0:09:30 Your First TypeScript Program
0:13:20 Configuring the TypeScript Compiler 
0:17:24 Debugging TypeScript Applications 
0:22:55 Fundamentals
0:23:23 Built-In Types
0:25:21 The any Type
0:28:06 Arrays
0:30:24 Tuples
0:33:08 Enums
0:36:31 Functions
0:43:22 Objects
0:47:57 Advanced Types
0:48:26 Type Aliases
0:50:04 Union Types 
0:52:40 Intersection Types 
0:54:44 Literal Types 
0:56:30 Nullable Types 
0:59:06 Optional Chaining

What is TypeScript?
Why do we need it ?
How it is different from javascript ?
Typescript - Microsoft 
To address shortcomings of Javascript 
Typescript is superset of java script 

Benefits:
-----------
-Static Typing 
-code completion
-refractoring 
-shorthand notation 

static / dynamic typing 


static variable declared early 
like int num =5  ex java, c , c++

dynamic 
like python 

Drawbacks:
------------
-compilation 
-Discipline in coding

Javascript - simple projects
Typescript - medium to large projects

npm - node package manager
node -v 
22.5 ( july 9,2025)

npm -i g typescript 
install
globally 

tsc -v 
typescript version 

index.ts

command to compile - tsc and filename 
tsc index.js 

we should add this path to path variable.
C:\Users\bgh51043\AppData\Roaming\npm
else it will not detect tsc version 

0:13:20 Configuring the TypeScript Compiler
tsc --init
a tsconfig.json file will be created
ES2016

Enable output dir config
error emit 
and use command tsc to compile all files 


0:17:24 Debugging TypeScript Applications 
Enable source map config
some issue setting this up in cap laptop 
you launch.json file 
and add below line : 
"preLaunchTask": "tsc: build - tsconfig.json",

"program": "${workspaceFolder}\\src\\index.ts",
            "preLaunchTask": "tsc: build - tsconfig.json",
            "outFiles": [
                "${workspaceFolder}/**/*.js"
            ]
			
and try debugging.
index.ts content 
let age:number = 20 
if ( age < 50 )
    age += 10
console.log(age)


Section 2 : Fundamentals :
--------------------------
0:22:55 Fundamentals
0:23:23 Built-In Types

let sales : number = 123_456_789 ;
let course : string = "TypeScript" ;
let is_published : boolean = true ;

0:25:21 The any Type
_
let level 
any type 
if we use any , we will loose major benefit of type script 

0:28:06 Arrays
________________

java script arrays are dynamic 
and each element can be of different type .

0:30:24 Tuples
---------------
let user : [number , string ] = [ 1, 'user' ]
tuple is fixed lenght array , where each element has particular type 
tuple restrict for 2 values 


0:33:08 Enums
-------------
//const Small = 1 ;
//const Medium = 2 ;
//const Large = 3 ;

//PascalCase 
enum Size { Small = 's',Medium = 'm',Large = 'l'}
enum Size { Small = 1,Medium ,Large }
let mysize = Size.Medium

node .\dist\src\index2.js 
let mysize = Size.Medium
2


0:36:31 Functions
---------------------
function calculateTax(income:number):number{
    return 0 
}
in tsconfig you can modify various configurations 

    "noUnusedLocals": true,                       
    "noUnusedParameters": true,   
    "noImplicitReturns": true, 
	
0:43:22 Objects
------------------
let employee : {
    readonly id : number 
    name : string
    retire : (date : Date) => void 
} = {
    id : 1 ,
    name : 'Mosh' ,
    retire : ( date : Date ) => {
        console.log(date);
    }
}

0:47:57 Advanced Types
-----------------------
DRY Principle - Don't repeat yourself 

type Employee = {

    readonly id : number 
    name : string
    retire : (date : Date) => void 
}

let employee : Employee =  {
    id : 1 ,
    name : 'Mosh' ,
    retire : ( date : Date ) => {
        console.log(date);
    }
}

TYPE Alias 

0:50:04 Union Types 
-------------------
function kgToLbs(weight: number | string) : number {
    //Narrowing
    if  (typeof weight == 'number')
        return weight * 2.2 ;
    else 
        return parseInt(weight) * 2.2 
}

kgToLbs(10);
kgToLbs('20kg')

compile this and run 
tsc 

0:52:40 Intersection Types 
--------------------------------------

type Draggable = {
    drag : () => void
};

type Resizable = {
    resize : () => void 
}

type UIWidget = Draggable & Resizable

let textbox : UIWidget = {

    drag: () => {},
    resize: () => {}
    
   
}

0:54:44 Literal Types 
----------------------
type Quantity = 50 | 100 ;
let quantity :  Quantity = 50


0:56:30 Nullable Types
----------------------

function greet(name:string | null | undefined){
    if (name)
        console.log(name.toUpperCase());
    else
        console.log('Hola');
}
greet(null);

0:59:06 Optional Chaining
-----------------------------